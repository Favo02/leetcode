from typing import List

def sumArray(nums, target):
  sums = [nums[0]]
  for n in range(1, len(nums)):
    sums.append(sums[n-1] + nums[n])
    if sums[n] > target:
      break
  return sums

def binSearch(arr, x):
  low = 0
  high = len(arr) - 1
  mid = 0

  while low <= high:
    mid = (high + low) // 2
    if arr[mid] < x:
      low = mid + 1
    elif arr[mid] > x:
      high = mid - 1
    else:
      return mid
  return -1

class Solution:
  def minOperations(self, nums: List[int], x: int) -> int:
    if x == 0: return 0

    sumsL = sumArray(nums, x)
    sumsR = sumArray(list(reversed(nums)), x)

    sol = 1_000_000_000

    # this loop could be merged with the third loop, the performances arent
    # impacted much, so for better readability I keep both of them
    for i, el in enumerate(sumsL):
      if el == x:
        sol = min(sol, i+1)

    for i, el in enumerate(sumsR):
      if el == x:
        sol = min(sol, i+1)

    for i, elemL in enumerate(sumsL):
      if elemL > x:
        break

      targetX = x - elemL
      index = binSearch(sumsR, targetX)

      if index != -1 and i+index+2 < len(nums):
        sol = min(sol, i+1 + index+1)

    return -1 if sol == 1_000_000_000 else sol


s = Solution()
print(s.minOperations([8828,9581,49,9818,9974,9869,9991,10000,10000,10000,9999,9993,9904,8819,1231,6309], 134365))
print(s.minOperations([1,1,3,2,5], 5))
print(s.minOperations([1,1,4,2,3], 5)) # 2
print(s.minOperations([5,6,7,8,9], 4)) # -1
print(s.minOperations([3,2,20,1,1,3], 10)) # 5
print(s.minOperations([1,1], 3)) # -1
print(s.minOperations([6016,5483,541,4325,8149,3515,7865,2209,9623,9763,4052,6540,2123,2074,765,7520,4941,5290,5868,6150,6006,6077,2856,7826,9119], 31841)) # 6
print(s.minOperations([1241,8769,9151,3211,2314,8007,3713,5835,2176,8227,5251,9229,904,1899,5513,7878,8663,3804,2685,3501,1204,9742,2578,8849,1120,4687,5902,9929,6769,8171,5150,1343,9619,3973,3273,6427,47,8701,2741,7402,1412,2223,8152,805,6726,9128,2794,7137,6725,4279,7200,5582,9583,7443,6573,7221,1423,4859,2608,3772,7437,2581,975,3893,9172,3,3113,2978,9300,6029,4958,229,4630,653,1421,5512,5392,7287,8643,4495,2640,8047,7268,3878,6010,8070,7560,8931,76,6502,5952,4871,5986,4935,3015,8263,7497,8153,384,1136], 894887480)) # -1
print(s.minOperations([2753,778,2454,3049,8148,6899,2088,2526,9979,5771,7687,8419,2551,183,7646,8682,3514,7777,848,4469,5774,8952,9631,4123,1015,258,9195,5763,4802,4819,4889,1345,9357,9422,7958,3801,1798,3411,3981,4658,3124,1406,8671,6907,4384,1009,5628,4557,4436,9882,3638,6921,4107,3016,6969,474,4755,8080,2859,568,7929,7496,647,5659,4706,3416,4712,9487,892,3338,2983,3754,3389,5601,8286,3958,7611,4978,5029,9205,9359,1255,2686,1657,980,841,6938,9534,6885,6899,298,5906,8561,2858,1384,7987,7044,6390,1984,2244,2982,4155,3121,6332,4672,5346,1654,2862,5947,1181,6207,8546,7376,6393,1873,9584,7373,6265,964,2457,4355,8884,4655,4361,5814,2065,2280,8608,9077,7931,3256,3749,2359,5248,9358,3541,9808,7796,9208,7416,735,4142,9955,2592,2163,6383,7545,6832,988,1179,5738,8941,8446,1556,1977,9267,1276,905,9349,1936,4837,608,8771,7047,5150,3732,3743,4555,1927,9249,1908,7834,8828,5859,1133,6816,4688,359,6816,3232,4264,3335,5691,4051,4857,9467,2382,3613,61,1214,4539,4829,3451,3450,7422,6076,5356,659,3059,9223,5950,9004,7290,3580,10000,725,6730,2327,1055,5342,3856,6218,9008,9184,9290,234,5918,6305,5383,806,4,8479,3612,956,8322,2517,9533,8600,8549,9108,6855,7148,3038,8679,5771,4107,2568,2931,7027,8841,5318,2524,8628,5086,6885,6460,1296,5634,9107,2681,1029,2777,8767,3413,1821,119,5682,9330,948,9374,4219,6159,9464,7880,7608,2492,8889,28,6031,4111,8630,7197,296,2419,7920,1381], 1140836)) # 226
